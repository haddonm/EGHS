% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tashs_funs.R
\name{tasdata}
\alias{tasdata}
\title{tasdata processes the projections to produce the data for the HCR}
\usage{
tasdata(
  tasCPUE,
  tasFIS,
  tasNaS,
  sauCPUE,
  sauacatch,
  saucatch,
  sauNAS,
  year,
  decrement,
  startCE
)
}
\arguments{
\item{tasCPUE}{a function that generates the CPUE statistics}

\item{tasFIS}{a function that generates the FIS statistics}

\item{tasNaS}{a function that generates the Numbers-at-size samples}

\item{sauCPUE}{the cpue by sau object from the dynamics object from the
replicate model runs}

\item{sauacatch}{aspirational catches for each SAU from year-1, these would
be the actual catches in South Australia, so we do not need a separate
tasCatch function or its equivalent in SA, as we already have the
sauacatch being input}

\item{saucatch}{actual catches for each SAU from year-1, these are not needed
in Tasmania or Victoria, but are needed (as well as acatch) in South
Australia}

\item{sauNAS}{the numbers-at-size data from the zoneDP object}

\item{year}{the specific year being considered}

\item{decrement}{how many years from the current to remove from the cpue
cpue time series, default=1, which means that the Aspirational catches
and TAC for a year derive from the previous year (as in Tasmania). If in
SA decrement = 2 would focus on the year previous.}

\item{startCE}{the initial year of available catch rates}
}
\value{
a list of arrce, yearnames, acatch, fis, and nas
}
\description{
tasdata takes the projection results from zoneDP, and histCE
from 'otherdata', and appropriately samples them ready for the HCR.
Used directly by aMSE. In the TasHS the no FIS data, or NaS data is used.
The aCatches by SAU are used but only to be modified by the HS for the
next year's acatches. tasCatch is only included because the SAHS uses
catches by sau directly in HS
}
\examples{
print("wait on suitable data sets")
# sampleCE=tasCPUE;sampleFIS=tasFIS;sampleNaS=tasNAS;sauCPUE=zoneDP$cesau[,,iter]
# sauacatch=zoneDP$acatch[,,iter];saucatch=zoneDP$catsau[,,iter]
# sauNAS=list(Nt=zoneDP$Nt[,,,iter];catchN=zoneDP$catchN[,,,iter]
# NumNe=zoneDP$NumNe[,,,iter]);year=year;startCE=hsargs$startCE;
# decrement=hsargs$decrement
}
